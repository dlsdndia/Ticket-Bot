plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.9.0' // Kotlin JVM 플러그인: Kotlin 코드를 컴파일하고 JVM에서 실행하기 위해 사용됩니다.
    id 'application' // 애플리케이션 플러그인: 애플리케이션의 실행을 관리하고, 애플리케이션 실행에 필요한 스크립트를 생성합니다.
    id 'com.github.johnrengelman.shadow' version '7.1.2' // Shadow 플러그인: 모든 의존성을 포함한 Fat JAR 파일을 생성하기 위해 사용됩니다.
}

group = 'hwang.macro' // 프로젝트의 그룹 ID 설정. 패키지 네이밍 규칙과 비슷하게 사용됩니다.
version = '1.0-SNAPSHOT' // 프로젝트 버전 설정. 'SNAPSHOT'은 아직 릴리즈되지 않은 개발 중인 버전을 의미합니다.

repositories {
    mavenCentral() // Maven Central 저장소에서 라이브러리 의존성을 다운로드하도록 설정합니다.
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib' // Kotlin 표준 라이브러리를 의존성으로 추가. Kotlin 코드가 실행되기 위해 필요한 필수 라이브러리입니다.
    implementation 'org.jline:jline:3.26.0' // JLine 라이브러리 의존성 추가 (터미널 입력 제어 및 UI 구현)
    testImplementation 'org.jetbrains.kotlin:kotlin-test' // Kotlin 테스트 라이브러리 의존성 추가. 단위 테스트를 작성하고 실행하는 데 사용됩니다.
}

test {
    useJUnitPlatform() // JUnit 플랫폼을 사용하여 테스트를 실행하도록 설정. JUnit 기반의 테스트 라이브러리를 사용하기 위한 설정입니다.
}

application {
    mainClass = 'hwang.macro.MainKt' // Main 클래스 설정. Kotlin의 'Main.kt' 파일에서 생성된 'MainKt' 클래스를 지정합니다.
    // 애플리케이션을 실행할 때 JVM이 이 클래스를 통해 프로그램을 시작합니다.
}

jar {
    manifest {
        attributes(
                'Main-Class': 'hwang.macro.MainKt' // JAR 파일의 메타데이터로 Main 클래스를 지정. JAR 파일을 실행할 때 이 클래스를 통해 프로그램이 시작됩니다.
        )
    }
}

// LICENSE와 README.md 파일을 src/main/resources 폴더로 복사하는 작업 등록
tasks.register("copyResources", Copy) { copyTask ->
    copyTask.from("LICENSE", "README.md") // 프로젝트 루트에 있는 LICENSE와 README.md 파일을 복사
    copyTask.into("src/main/resources") // 복사된 파일들을 src/main/resources 폴더에 넣습니다. 이를 통해 JAR 파일에서 해당 파일들을 읽을 수 있게 됩니다.
}

tasks.named("processResources") {
    dependsOn("copyResources") // processResources 태스크가 실행되기 전에 copyResources 태스크가 실행되도록 의존성을 설정. 리소스 파일을 복사한 후에 리소스 처리가 이루어집니다.
}

// shadowJar 태스크 설정: 종속성을 포함한 Fat JAR 생성
tasks.named('shadowJar') {
    archiveClassifier.set('') // '-all' 같은 접미사가 붙지 않도록 설정. 기본적으로 shadowJar는 'all'을 접미사로 붙이지만 이를 제거합니다.
}

tasks.build {
    dependsOn tasks.shadowJar // build 태스크가 실행될 때 shadowJar 태스크도 함께 실행되도록 설정. 이를 통해 빌드 시 Fat JAR이 생성됩니다.
    dependsOn 'copyResources' // build 태스크 실행 시 copyResources 태스크도 실행되도록 설정. 라이센스와 README 파일이 함께 복사됩니다.
}